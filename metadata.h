#ifndef METADATA_H
#define METADATA_H

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define REG_TO_REG 0
#define REG_TO_IMM 1
#define REG_TO_MEM 2
#define MEM_TO_REG 3
#define IMM_TO_REG 4

#define HAS_MODRM true
#define NO_IMMEDIATE 0
#define SINGLE_BYTE_IMM 1
#define FOUR_BYTE_IMM 4
#define NO_MODRM false
#define PLACEHOLDER 0 

#define md_ADD_RM8_R8 {HAS_MODRM, NO_IMMEDIATE, 2, REG_TO_MEM}
#define md_ADD_RM32_R32 {HAS_MODRM, NO_IMMEDIATE, 2, MEM_TO_REG}
#define md_ADD_R32_RM32 {HAS_MODRM, NO_IMMEDIATE, 2, REG_TO_MEM}
#define md_ADD_AL_IMM8 {NO_MODRM, SINGLE_BYTE_IMM, 2, REG_TO_MEM}
#define md_ADD_EAX_IMM32 {NO_MODRM, FOUR_BYTE_IMM, 2, REG_TO_MEM} // change
#define md_ADD_R8_RM8 {NO_MODRM, SINGLE_BYTE_IMM, 2, REG_TO_MEM}    // change

#define md_MOV_R8_RM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_RM32_R32 {HAS_MODRM, NO_IMMEDIATE, 2, MEM_TO_REG} 
#define md_MOV_RM8_R8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_R32_RM32 {HAS_MODRM, NO_IMMEDIATE, 2, REG_TO_MEM} 

#define md_MOV_EAX_IMM32 {NO_MODRM, FOUR_BYTE_IMM, 2, IMM_TO_REG}
#define md_MOV_ECX_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_EDX_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_EBX_IMM32 {NO_MODRM, FOUR_BYTE_IMM,  2, IMM_TO_REG}
#define md_MOV_ESP_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_EBP_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_ESI_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_EDI_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_INVALID {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER, PLACEHOLDER }
#define md_MOV_AL_MOFFS8 {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_EAXv_MOFFSv {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_MOFFS8_AL {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_MOFFSv_EAX {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_AL_IMM8 {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_CL_IMM8 {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_DL_IMM8 {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_MOV_R8_IMM {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}

#define md_ADC_RM8_R8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_ADC_RM32_R32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_ADC_R8_RM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_ADC_R32_RM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_ADC_AL_IMM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_ADC_EAX_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_AND_RM8_R8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_AND_RM32_R32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_AND_R8_RM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_AND_R32_RM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_AND_AL_IMM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_AND_EAX_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_XOR_RM8_R8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_XOR_RM32_R32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_XOR_R8_RM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_XOR_R32_RM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_XOR_AL_IMM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_XOR_EAX_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_NOP {PLACEHOLDER, PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER}
#define md_SUB_EAX_IMM32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_PUSH_EAX {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_PUSH_IMM8 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_POP_EAX {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_POP_R32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_JMP_REL32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_CALL_REL32 {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_RET {PLACEHOLDER, PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER}
#define md_MOV_MOFFSv_EAXv {PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER, PLACEHOLDER}
#define md_MOV_R8_IMM8 {PLACEHOLDER,  PLACEHOLDER, PLACEHOLDER, PLACEHOLDER}

//---- LUTs for OPCODES----
//=========================
typedef enum
{
    ADD_RM8_R8,
    ADD_RM32_R32,
    ADD_R8_RM8,
    ADD_R32_RM32,
    ADD_AL_IMM8,
    ADD_EAX_IMM32,

    INVALID,

    MOV_R8_RM8, 
    MOV_RM32_R32, 
    MOV_RM8_R8, 
    MOV_R32_RM32,

    MOV_AL_MOFFS8, 
    MOV_EAXv_MOFFSv, 
    MOV_MOFFS8_AL, 
    MOV_MOFFSv_EAXv,
    MOV_AL_IMM8, 
    MOV_CL_IMM8, 
    MOV_DL_IMM8, 
    MOV_R8_IMM8,
    MOV_EAX_IMM32, 
    MOV_ECX_IMM32, 
    MOV_EDX_IMM32, 
    MOV_EBX_IMM32, 
    MOV_ESP_IMM32, 
    MOV_EBP_IMM32, 
    MOV_ESI_IMM32, 
    MOV_EDI_IMM32, 

    ADC_RM8_R8,
    ADC_RM32_R32,
    ADC_R8_RM8,
    ADC_R32_RM32,
    ADC_AL_IMM8,
    ADC_EAX_IMM32,

    AND_RM8_R8,
    AND_RM32_R32,
    AND_R8_RM8,
    AND_R32_RM32,
    AND_AL_IMM8,
    AND_EAX_IMM32,

    XOR_RM8_R8,
    XOR_RM32_R32,
    XOR_R8_RM8,
    XOR_R32_RM32,
    XOR_AL_IMM8,
    XOR_EAX_IMM32,

    NOP,

    SUB_EAX_IMM32,
    PUSH_EAX,
    PUSH_IMM8,
    POP_EAX,
    POP_R32,
    JMP_REL32,
    CALL_REL32,
    RET
} Opcode_ID;

typedef struct
{
    bool has_modrm;
    size_t immediate_bytes;
    size_t operand_count;
    int operand_type;
} Instruction_metadata;

static const Instruction_metadata instr_metadata_lut[256] = { // also indexed by opcode id
    md_ADD_RM8_R8,
    md_ADD_RM32_R32,
    md_ADD_R8_RM8,
    md_ADD_R32_RM32,
    md_ADD_AL_IMM8,
    md_ADD_EAX_IMM32,
    md_INVALID,

    md_MOV_R8_RM8, 
    md_MOV_RM32_R32, 
    md_MOV_R8_RM8, 
    md_MOV_R32_RM32,

    md_MOV_AL_MOFFS8, 
    md_MOV_EAXv_MOFFSv, 
    md_MOV_MOFFS8_AL, 
    md_MOV_MOFFSv_EAXv,
    md_MOV_AL_IMM8, 
    md_MOV_CL_IMM8, 
    md_MOV_DL_IMM8, 
    md_MOV_R8_IMM8,
    md_MOV_EAX_IMM32, 
    md_MOV_ECX_IMM32, 
    md_MOV_EDX_IMM32, 
    md_MOV_EBX_IMM32, 
    md_MOV_ESP_IMM32, 
    md_MOV_EBP_IMM32, 
    md_MOV_ESI_IMM32, 
    md_MOV_EDI_IMM32, 
    md_ADC_RM8_R8,
    md_ADC_RM32_R32,
    md_ADC_R8_RM8,
    md_ADC_R32_RM32,
    md_ADC_AL_IMM8,
    md_ADC_EAX_IMM32,
    md_AND_RM8_R8,
    md_AND_RM32_R32,
    md_AND_R8_RM8,
    md_AND_R32_RM32,
    md_AND_AL_IMM8,
    md_AND_EAX_IMM32,
    md_XOR_RM8_R8,
    md_XOR_RM32_R32,
    md_XOR_R8_RM8,
    md_XOR_R32_RM32,
    md_XOR_AL_IMM8,
    md_XOR_EAX_IMM32,
    md_NOP,
    md_SUB_EAX_IMM32,
    md_PUSH_EAX,
    md_PUSH_IMM8,
    md_POP_EAX,
    md_POP_R32,
    md_JMP_REL32,
    md_CALL_REL32,
    md_RET
};

#endif